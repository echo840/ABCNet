2023/01/31 21:51:55 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.9 (main, Jan 11 2023, 15:21:40) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 386846147
    GPU 0,1: NVIDIA RTX A6000
    CUDA_HOME: /usr/local/cuda-11.3
    NVCC: Cuda compilation tools, release 11.3, V11.3.58
    GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
    PyTorch: 1.12.0
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.13.0
    OpenCV: 4.7.0
    MMEngine: 0.5.0

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: None
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/01/31 21:51:57 - mmengine - INFO - Config:
file_client_args = dict(backend='disk')
num_classes = 1
strides = [8, 16, 32, 64, 128]
bbox_coder = dict(type='mmdet.DistancePointBBoxCoder')
with_bezier = True
norm_on_bbox = True
use_sigmoid_cls = True
dictionary = dict(
    type='Dictionary',
    dict_file=
    '/home/user/lz/ABCNet/mmocr/projects/ABCNet/config/abcnet_v2/../../dicts/abcnet.txt',
    with_start=False,
    with_end=False,
    same_start_end=False,
    with_padding=True,
    with_unknown=True)
model = dict(
    type='ABCNet',
    data_preprocessor=dict(
        type='TextDetDataPreprocessor',
        mean=[103.53, 116.28, 123.675],
        std=[1, 1, 1],
        bgr_to_rgb=False,
        pad_size_divisor=32),
    backbone=dict(
        type='mmdet.ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=False),
        norm_eval=True,
        style='caffe',
        init_cfg=dict(
            type='Pretrained',
            checkpoint='open-mmlab://detectron2/resnet50_caffe')),
    neck=dict(
        type='BiFPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        start_level=0,
        add_extra_convs=True,
        norm_cfg=dict(type='BN'),
        num_outs=6,
        relu_before_extra_convs=True),
    det_head=dict(
        type='ABCNetDetHead',
        num_classes=1,
        in_channels=256,
        stacked_convs=4,
        feat_channels=256,
        strides=[8, 16, 32, 64, 128],
        norm_on_bbox=True,
        use_sigmoid_cls=True,
        centerness_on_reg=True,
        dcn_on_last_conv=False,
        conv_bias=True,
        use_scale=False,
        with_bezier=True,
        init_cfg=dict(
            type='Normal',
            layer='Conv2d',
            std=0.01,
            override=dict(
                type='Normal',
                name='conv_cls',
                std=0.01,
                bias=-4.59511985013459)),
        module_loss=dict(
            type='ABCNetDetModuleLoss',
            num_classes=1,
            strides=[8, 16, 32, 64, 128],
            center_sampling=True,
            center_sample_radius=1.5,
            bbox_coder=dict(type='mmdet.DistancePointBBoxCoder'),
            norm_on_bbox=True,
            loss_cls=dict(
                type='mmdet.FocalLoss',
                use_sigmoid=True,
                gamma=2.0,
                alpha=0.25,
                loss_weight=1.0),
            loss_bbox=dict(type='mmdet.GIoULoss', loss_weight=1.0),
            loss_centerness=dict(
                type='mmdet.CrossEntropyLoss',
                use_sigmoid=True,
                loss_weight=1.0)),
        postprocessor=dict(
            type='ABCNetDetPostprocessor',
            use_sigmoid_cls=True,
            strides=[8, 16, 32, 64, 128],
            bbox_coder=dict(type='mmdet.DistancePointBBoxCoder'),
            with_bezier=True,
            test_cfg=dict(
                nms_pre=1000,
                nms=dict(type='nms', iou_threshold=0.4),
                score_thr=0.3))),
    roi_head=dict(
        type='RecRoIHead',
        neck=dict(type='CoordinateHead'),
        roi_extractor=dict(
            type='BezierRoIExtractor',
            roi_layer=dict(
                type='BezierAlign', output_size=(16, 64), sampling_ratio=1.0),
            out_channels=256,
            featmap_strides=[4, 8, 16]),
        rec_head=dict(
            type='ABCNetRec',
            backbone=dict(type='ABCNetRecBackbone'),
            encoder=dict(type='ABCNetRecEncoder'),
            decoder=dict(
                type='ABCNetRecDecoder',
                dictionary=dict(
                    type='Dictionary',
                    dict_file=
                    '/home/user/lz/ABCNet/mmocr/projects/ABCNet/config/abcnet_v2/../../dicts/abcnet.txt',
                    with_start=False,
                    with_end=False,
                    same_start_end=False,
                    with_padding=True,
                    with_unknown=True),
                postprocessor=dict(
                    type='AttentionPostprocessor',
                    ignore_chars=['padding', 'unknown']),
                module_loss=dict(
                    type='CEModuleLoss',
                    ignore_first_char=False,
                    ignore_char=-1,
                    reduction='mean'),
                max_seq_len=25))),
    postprocessor=dict(
        type='ABCNetPostprocessor',
        rescale_fields=['polygons', 'bboxes', 'beziers']))
test_pipeline = [
    dict(
        type='LoadImageFromFile',
        file_client_args=dict(backend='disk'),
        color_type='color_ignore_orientation'),
    dict(type='Resize', scale=(2000, 4000), keep_ratio=True, backend='pillow'),
    dict(
        type='LoadOCRAnnotations',
        with_polygon=True,
        with_bbox=True,
        with_label=True,
        with_text=True),
    dict(
        type='PackTextDetInputs',
        meta_keys=('img_path', 'ori_shape', 'img_shape', 'scale_factor'))
]
train_pipeline = [
    dict(
        type='LoadImageFromFile',
        file_client_args=dict(backend='disk'),
        color_type='color_ignore_orientation'),
    dict(
        type='LoadOCRAnnotations',
        with_polygon=True,
        with_bbox=True,
        with_label=True,
        with_text=True),
    dict(type='RemoveIgnored'),
    dict(type='RandomCrop', min_side_ratio=0.1),
    dict(
        type='RandomRotate',
        max_angle=30,
        pad_with_fixed_color=True,
        use_canvas=True),
    dict(
        type='RandomChoiceResize',
        scales=[(980, 2900), (1044, 2900), (1108, 2900), (1172, 2900),
                (1236, 2900), (1300, 2900), (1364, 2900), (1428, 2900),
                (1492, 2900)],
        keep_ratio=True),
    dict(
        type='PackTextDetInputs',
        meta_keys=('img_path', 'ori_shape', 'img_shape', 'scale_factor'))
]
icdar2015_textspotting_data_root = 'data/icdar2015'
icdar2015_textspotting_train = dict(
    type='OCRDataset',
    data_root='data/icdar2015',
    ann_file='textspotting_train.json',
    pipeline=[
        dict(
            type='LoadImageFromFile',
            file_client_args=dict(backend='disk'),
            color_type='color_ignore_orientation'),
        dict(
            type='LoadOCRAnnotations',
            with_polygon=True,
            with_bbox=True,
            with_label=True,
            with_text=True),
        dict(type='RemoveIgnored'),
        dict(type='RandomCrop', min_side_ratio=0.1),
        dict(
            type='RandomRotate',
            max_angle=30,
            pad_with_fixed_color=True,
            use_canvas=True),
        dict(
            type='RandomChoiceResize',
            scales=[(980, 2900), (1044, 2900), (1108, 2900), (1172, 2900),
                    (1236, 2900), (1300, 2900), (1364, 2900), (1428, 2900),
                    (1492, 2900)],
            keep_ratio=True),
        dict(
            type='PackTextDetInputs',
            meta_keys=('img_path', 'ori_shape', 'img_shape', 'scale_factor'))
    ])
icdar2015_textspotting_test = dict(
    type='OCRDataset',
    data_root='data/icdar2015',
    ann_file='textspotting_test.json',
    test_mode=True,
    pipeline=[
        dict(
            type='LoadImageFromFile',
            file_client_args=dict(backend='disk'),
            color_type='color_ignore_orientation'),
        dict(
            type='Resize',
            scale=(2000, 4000),
            keep_ratio=True,
            backend='pillow'),
        dict(
            type='LoadOCRAnnotations',
            with_polygon=True,
            with_bbox=True,
            with_label=True,
            with_text=True),
        dict(
            type='PackTextDetInputs',
            meta_keys=('img_path', 'ori_shape', 'img_shape', 'scale_factor'))
    ])
default_scope = 'mmocr'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
randomness = dict(seed=None)
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=5),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', interval=20),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    sync_buffer=dict(type='SyncBuffersHook'),
    visualization=dict(
        type='VisualizationHook',
        interval=1,
        enable=False,
        show=False,
        draw_gt=False,
        draw_pred=False))
log_level = 'INFO'
log_processor = dict(type='LogProcessor', window_size=10, by_epoch=True)
load_from = '/home/user/lz/ABCNet/mmocr/projects/ABCNet/model/abcnet-v2_resnet50_bifpn_500e_icdar2015-5e4cc7ed.pth'
resume = False
val_evaluator = [dict(type='E2EHmeanIOUMetric'), dict(type='HmeanIOUMetric')]
test_evaluator = [dict(type='E2EHmeanIOUMetric'), dict(type='HmeanIOUMetric')]
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='TextSpottingLocalVisualizer',
    name='visualizer',
    vis_backends=[dict(type='LocalVisBackend')])
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001),
    clip_grad=dict(type='value', clip_value=1))
train_cfg = dict(
    type='EpochBasedTrainLoop', max_epochs=500, val_interval=1, val_begin=0)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
param_scheduler = [
    dict(type='LinearLR', end=1000, start_factor=0.001, by_epoch=False)
]
train_dataloader = dict(
    batch_size=1,
    num_workers=8,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=True),
    dataset=dict(
        type='OCRDataset',
        data_root='data/icdar2015',
        ann_file='textspotting_train.json',
        pipeline=[
            dict(
                type='LoadImageFromFile',
                file_client_args=dict(backend='disk'),
                color_type='color_ignore_orientation'),
            dict(
                type='LoadOCRAnnotations',
                with_polygon=True,
                with_bbox=True,
                with_label=True,
                with_text=True),
            dict(type='RemoveIgnored'),
            dict(type='RandomCrop', min_side_ratio=0.1),
            dict(
                type='RandomRotate',
                max_angle=30,
                pad_with_fixed_color=True,
                use_canvas=True),
            dict(
                type='RandomChoiceResize',
                scales=[(980, 2900), (1044, 2900), (1108, 2900), (1172, 2900),
                        (1236, 2900), (1300, 2900), (1364, 2900), (1428, 2900),
                        (1492, 2900)],
                keep_ratio=True),
            dict(
                type='PackTextDetInputs',
                meta_keys=('img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ]))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='OCRDataset',
        data_root='data/icdar2015',
        ann_file='textspotting_test.json',
        test_mode=True,
        pipeline=[
            dict(
                type='LoadImageFromFile',
                file_client_args=dict(backend='disk'),
                color_type='color_ignore_orientation'),
            dict(
                type='Resize',
                scale=(2000, 4000),
                keep_ratio=True,
                backend='pillow'),
            dict(
                type='LoadOCRAnnotations',
                with_polygon=True,
                with_bbox=True,
                with_label=True,
                with_text=True),
            dict(
                type='PackTextDetInputs',
                meta_keys=('img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ]))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='OCRDataset',
        data_root='data/icdar2015',
        ann_file='textspotting_test.json',
        test_mode=True,
        pipeline=[
            dict(
                type='LoadImageFromFile',
                file_client_args=dict(backend='disk'),
                color_type='color_ignore_orientation'),
            dict(
                type='Resize',
                scale=(2000, 4000),
                keep_ratio=True,
                backend='pillow'),
            dict(
                type='LoadOCRAnnotations',
                with_polygon=True,
                with_bbox=True,
                with_label=True,
                with_text=True),
            dict(
                type='PackTextDetInputs',
                meta_keys=('img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ]))
custom_imports = dict(imports=['abcnet'], allow_failed_imports=False)
find_unused_parameters = True
launcher = 'none'
work_dir = 'work_dirs/'

2023/01/31 21:51:57 - mmengine - WARNING - The "visualizer" registry in mmocr did not set import location. Fallback to call `mmocr.utils.register_all_modules` instead.
2023/01/31 21:51:57 - mmengine - WARNING - The "vis_backend" registry in mmocr did not set import location. Fallback to call `mmocr.utils.register_all_modules` instead.
2023/01/31 21:51:58 - mmengine - WARNING - The "model" registry in mmocr did not set import location. Fallback to call `mmocr.utils.register_all_modules` instead.
2023/01/31 21:51:58 - mmengine - WARNING - The "model" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/01/31 21:51:58 - mmengine - WARNING - The "task util" registry in mmocr did not set import location. Fallback to call `mmocr.utils.register_all_modules` instead.
2023/01/31 21:51:58 - mmengine - WARNING - The "task util" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/01/31 21:52:00 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/01/31 21:52:00 - mmengine - WARNING - The "hook" registry in mmocr did not set import location. Fallback to call `mmocr.utils.register_all_modules` instead.
2023/01/31 21:52:00 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/01/31 21:52:01 - mmengine - WARNING - The "loop" registry in mmocr did not set import location. Fallback to call `mmocr.utils.register_all_modules` instead.
2023/01/31 21:52:01 - mmengine - WARNING - The "dataset" registry in mmocr did not set import location. Fallback to call `mmocr.utils.register_all_modules` instead.
2023/01/31 21:52:01 - mmengine - WARNING - The "transform" registry in mmocr did not set import location. Fallback to call `mmocr.utils.register_all_modules` instead.
2023/01/31 21:52:01 - mmengine - WARNING - The "data sampler" registry in mmocr did not set import location. Fallback to call `mmocr.utils.register_all_modules` instead.
2023/01/31 21:52:01 - mmengine - WARNING - The "metric" registry in mmocr did not set import location. Fallback to call `mmocr.utils.register_all_modules` instead.
2023/01/31 21:52:02 - mmengine - INFO - Load checkpoint from /home/user/lz/ABCNet/mmocr/projects/ABCNet/model/abcnet-v2_resnet50_bifpn_500e_icdar2015-5e4cc7ed.pth
2023/01/31 21:52:10 - mmengine - INFO - Epoch(test) [  5/500]    eta: 0:12:24  time: 1.5041  data_time: 0.0594  memory: 34423  
2023/01/31 21:52:12 - mmengine - INFO - Epoch(test) [ 10/500]    eta: 0:07:46  time: 0.9516  data_time: 0.0314  memory: 10079  
2023/01/31 21:52:14 - mmengine - INFO - Epoch(test) [ 15/500]    eta: 0:06:04  time: 0.3759  data_time: 0.0034  memory: 9906  
2023/01/31 21:52:15 - mmengine - INFO - Epoch(test) [ 20/500]    eta: 0:05:14  time: 0.3604  data_time: 0.0035  memory: 10216  
2023/01/31 21:52:17 - mmengine - INFO - Epoch(test) [ 25/500]    eta: 0:04:46  time: 0.3777  data_time: 0.0035  memory: 10114  
2023/01/31 21:52:19 - mmengine - INFO - Epoch(test) [ 30/500]    eta: 0:04:23  time: 0.3668  data_time: 0.0036  memory: 3596  
2023/01/31 21:52:21 - mmengine - INFO - Epoch(test) [ 35/500]    eta: 0:04:06  time: 0.3462  data_time: 0.0036  memory: 3596  
2023/01/31 21:52:22 - mmengine - INFO - Epoch(test) [ 40/500]    eta: 0:03:52  time: 0.3418  data_time: 0.0035  memory: 3596  
2023/01/31 21:52:24 - mmengine - INFO - Epoch(test) [ 45/500]    eta: 0:03:41  time: 0.3425  data_time: 0.0035  memory: 3596  
2023/01/31 21:52:26 - mmengine - INFO - Epoch(test) [ 50/500]    eta: 0:03:32  time: 0.3436  data_time: 0.0036  memory: 3596  
2023/01/31 21:52:28 - mmengine - INFO - Epoch(test) [ 55/500]    eta: 0:03:24  time: 0.3373  data_time: 0.0036  memory: 3596  
2023/01/31 21:52:29 - mmengine - INFO - Epoch(test) [ 60/500]    eta: 0:03:19  time: 0.3595  data_time: 0.0036  memory: 10424  
2023/01/31 21:52:31 - mmengine - INFO - Epoch(test) [ 65/500]    eta: 0:03:13  time: 0.3628  data_time: 0.0036  memory: 3596  
2023/01/31 21:52:33 - mmengine - INFO - Epoch(test) [ 70/500]    eta: 0:03:08  time: 0.3432  data_time: 0.0036  memory: 3596  
2023/01/31 21:52:35 - mmengine - INFO - Epoch(test) [ 75/500]    eta: 0:03:04  time: 0.3568  data_time: 0.0035  memory: 10148  
2023/01/31 21:52:37 - mmengine - INFO - Epoch(test) [ 80/500]    eta: 0:03:00  time: 0.3779  data_time: 0.0035  memory: 10458  
2023/01/31 21:52:38 - mmengine - INFO - Epoch(test) [ 85/500]    eta: 0:02:56  time: 0.3592  data_time: 0.0035  memory: 3596  
2023/01/31 21:52:40 - mmengine - INFO - Epoch(test) [ 90/500]    eta: 0:02:52  time: 0.3389  data_time: 0.0035  memory: 3596  
2023/01/31 21:52:42 - mmengine - INFO - Epoch(test) [ 95/500]    eta: 0:02:49  time: 0.3756  data_time: 0.0036  memory: 10528  
2023/01/31 21:52:44 - mmengine - INFO - Epoch(test) [100/500]    eta: 0:02:46  time: 0.3752  data_time: 0.0036  memory: 3596  
2023/01/31 21:52:46 - mmengine - INFO - Epoch(test) [105/500]    eta: 0:02:43  time: 0.3573  data_time: 0.0036  memory: 10182  
2023/01/31 21:52:47 - mmengine - INFO - Epoch(test) [110/500]    eta: 0:02:40  time: 0.3575  data_time: 0.0036  memory: 3596  
2023/01/31 21:52:49 - mmengine - INFO - Epoch(test) [115/500]    eta: 0:02:36  time: 0.3404  data_time: 0.0035  memory: 3596  
2023/01/31 21:52:51 - mmengine - INFO - Epoch(test) [120/500]    eta: 0:02:33  time: 0.3414  data_time: 0.0036  memory: 3596  
2023/01/31 21:52:53 - mmengine - INFO - Epoch(test) [125/500]    eta: 0:02:30  time: 0.3431  data_time: 0.0036  memory: 3596  
2023/01/31 21:52:54 - mmengine - INFO - Epoch(test) [130/500]    eta: 0:02:28  time: 0.3510  data_time: 0.0036  memory: 3596  
2023/01/31 21:52:56 - mmengine - INFO - Epoch(test) [135/500]    eta: 0:02:25  time: 0.3571  data_time: 0.0036  memory: 3596  
2023/01/31 21:52:58 - mmengine - INFO - Epoch(test) [140/500]    eta: 0:02:22  time: 0.3433  data_time: 0.0036  memory: 3596  
2023/01/31 21:53:00 - mmengine - INFO - Epoch(test) [145/500]    eta: 0:02:20  time: 0.3742  data_time: 0.0036  memory: 10354  
2023/01/31 21:53:02 - mmengine - INFO - Epoch(test) [150/500]    eta: 0:02:18  time: 0.3797  data_time: 0.0036  memory: 3596  
2023/01/31 21:53:03 - mmengine - INFO - Epoch(test) [155/500]    eta: 0:02:16  time: 0.3657  data_time: 0.0036  memory: 10252  
2023/01/31 21:53:05 - mmengine - INFO - Epoch(test) [160/500]    eta: 0:02:13  time: 0.3640  data_time: 0.0036  memory: 3596  
2023/01/31 21:53:07 - mmengine - INFO - Epoch(test) [165/500]    eta: 0:02:11  time: 0.3418  data_time: 0.0036  memory: 3596  
2023/01/31 21:53:09 - mmengine - INFO - Epoch(test) [170/500]    eta: 0:02:08  time: 0.3394  data_time: 0.0036  memory: 3596  
2023/01/31 21:53:10 - mmengine - INFO - Epoch(test) [175/500]    eta: 0:02:06  time: 0.3422  data_time: 0.0036  memory: 3596  
2023/01/31 21:53:12 - mmengine - INFO - Epoch(test) [180/500]    eta: 0:02:04  time: 0.3434  data_time: 0.0036  memory: 3596  
2023/01/31 21:53:14 - mmengine - INFO - Epoch(test) [185/500]    eta: 0:02:01  time: 0.3515  data_time: 0.0036  memory: 3596  
2023/01/31 21:53:16 - mmengine - INFO - Epoch(test) [190/500]    eta: 0:02:00  time: 0.3946  data_time: 0.0036  memory: 11182  
2023/01/31 21:53:18 - mmengine - INFO - Epoch(test) [195/500]    eta: 0:01:57  time: 0.3833  data_time: 0.0036  memory: 3596  
2023/01/31 21:53:20 - mmengine - INFO - Epoch(test) [200/500]    eta: 0:01:56  time: 0.3766  data_time: 0.0037  memory: 10286  
2023/01/31 21:53:21 - mmengine - INFO - Epoch(test) [205/500]    eta: 0:01:54  time: 0.3805  data_time: 0.0037  memory: 3596  
2023/01/31 21:53:23 - mmengine - INFO - Epoch(test) [210/500]    eta: 0:01:51  time: 0.3431  data_time: 0.0036  memory: 3596  
2023/01/31 21:53:25 - mmengine - INFO - Epoch(test) [215/500]    eta: 0:01:49  time: 0.3706  data_time: 0.0036  memory: 3596  
2023/01/31 21:53:27 - mmengine - INFO - Epoch(test) [220/500]    eta: 0:01:47  time: 0.3709  data_time: 0.0037  memory: 3596  
2023/01/31 21:53:29 - mmengine - INFO - Epoch(test) [225/500]    eta: 0:01:45  time: 0.3378  data_time: 0.0036  memory: 3596  
2023/01/31 21:53:30 - mmengine - INFO - Epoch(test) [230/500]    eta: 0:01:43  time: 0.3390  data_time: 0.0036  memory: 3596  
2023/01/31 21:53:32 - mmengine - INFO - Epoch(test) [235/500]    eta: 0:01:41  time: 0.3405  data_time: 0.0036  memory: 3596  
2023/01/31 21:53:34 - mmengine - INFO - Epoch(test) [240/500]    eta: 0:01:39  time: 0.3495  data_time: 0.0036  memory: 3596  
2023/01/31 21:53:36 - mmengine - INFO - Epoch(test) [245/500]    eta: 0:01:37  time: 0.3615  data_time: 0.0037  memory: 3596  
2023/01/31 21:53:37 - mmengine - INFO - Epoch(test) [250/500]    eta: 0:01:35  time: 0.3523  data_time: 0.0037  memory: 3596  
2023/01/31 21:53:39 - mmengine - INFO - Epoch(test) [255/500]    eta: 0:01:32  time: 0.3435  data_time: 0.0037  memory: 3596  
2023/01/31 21:53:41 - mmengine - INFO - Epoch(test) [260/500]    eta: 0:01:30  time: 0.3438  data_time: 0.0036  memory: 3596  
2023/01/31 21:53:42 - mmengine - INFO - Epoch(test) [265/500]    eta: 0:01:28  time: 0.3456  data_time: 0.0036  memory: 3596  
2023/01/31 21:53:44 - mmengine - INFO - Epoch(test) [270/500]    eta: 0:01:26  time: 0.3474  data_time: 0.0036  memory: 3596  
2023/01/31 21:53:46 - mmengine - INFO - Epoch(test) [275/500]    eta: 0:01:24  time: 0.3419  data_time: 0.0036  memory: 3596  
2023/01/31 21:53:48 - mmengine - INFO - Epoch(test) [280/500]    eta: 0:01:22  time: 0.3425  data_time: 0.0036  memory: 3596  
2023/01/31 21:53:49 - mmengine - INFO - Epoch(test) [285/500]    eta: 0:01:20  time: 0.3438  data_time: 0.0036  memory: 3596  
2023/01/31 21:53:51 - mmengine - INFO - Epoch(test) [290/500]    eta: 0:01:18  time: 0.3431  data_time: 0.0036  memory: 3596  
2023/01/31 21:53:53 - mmengine - INFO - Epoch(test) [295/500]    eta: 0:01:16  time: 0.3426  data_time: 0.0036  memory: 3596  
2023/01/31 21:53:55 - mmengine - INFO - Epoch(test) [300/500]    eta: 0:01:14  time: 0.3444  data_time: 0.0036  memory: 3596  
2023/01/31 21:53:56 - mmengine - INFO - Epoch(test) [305/500]    eta: 0:01:12  time: 0.3479  data_time: 0.0036  memory: 3596  
2023/01/31 21:53:58 - mmengine - INFO - Epoch(test) [310/500]    eta: 0:01:10  time: 0.3460  data_time: 0.0036  memory: 3596  
2023/01/31 21:54:00 - mmengine - INFO - Epoch(test) [315/500]    eta: 0:01:09  time: 0.3998  data_time: 0.0036  memory: 10838  
2023/01/31 21:54:02 - mmengine - INFO - Epoch(test) [320/500]    eta: 0:01:07  time: 0.4113  data_time: 0.0037  memory: 3596  
2023/01/31 21:54:04 - mmengine - INFO - Epoch(test) [325/500]    eta: 0:01:05  time: 0.3532  data_time: 0.0036  memory: 3596  
2023/01/31 21:54:06 - mmengine - INFO - Epoch(test) [330/500]    eta: 0:01:03  time: 0.3438  data_time: 0.0036  memory: 3596  
2023/01/31 21:54:07 - mmengine - INFO - Epoch(test) [335/500]    eta: 0:01:01  time: 0.3500  data_time: 0.0036  memory: 3596  
2023/01/31 21:54:09 - mmengine - INFO - Epoch(test) [340/500]    eta: 0:00:59  time: 0.3455  data_time: 0.0036  memory: 3596  
2023/01/31 21:54:11 - mmengine - INFO - Epoch(test) [345/500]    eta: 0:00:57  time: 0.3422  data_time: 0.0037  memory: 3596  
2023/01/31 21:54:12 - mmengine - INFO - Epoch(test) [350/500]    eta: 0:00:55  time: 0.3445  data_time: 0.0037  memory: 3596  
2023/01/31 21:54:14 - mmengine - INFO - Epoch(test) [355/500]    eta: 0:00:53  time: 0.3477  data_time: 0.0037  memory: 3596  
2023/01/31 21:54:16 - mmengine - INFO - Epoch(test) [360/500]    eta: 0:00:51  time: 0.3468  data_time: 0.0037  memory: 3596  
2023/01/31 21:54:18 - mmengine - INFO - Epoch(test) [365/500]    eta: 0:00:50  time: 0.3609  data_time: 0.0037  memory: 3596  
2023/01/31 21:54:20 - mmengine - INFO - Epoch(test) [370/500]    eta: 0:00:48  time: 0.3625  data_time: 0.0037  memory: 3596  
2023/01/31 21:54:21 - mmengine - INFO - Epoch(test) [375/500]    eta: 0:00:46  time: 0.3452  data_time: 0.0037  memory: 3596  
2023/01/31 21:54:23 - mmengine - INFO - Epoch(test) [380/500]    eta: 0:00:44  time: 0.3408  data_time: 0.0036  memory: 3596  
2023/01/31 21:54:25 - mmengine - INFO - Epoch(test) [385/500]    eta: 0:00:42  time: 0.3460  data_time: 0.0036  memory: 3596  
2023/01/31 21:54:26 - mmengine - INFO - Epoch(test) [390/500]    eta: 0:00:40  time: 0.3475  data_time: 0.0036  memory: 3596  
2023/01/31 21:54:28 - mmengine - INFO - Epoch(test) [395/500]    eta: 0:00:38  time: 0.3424  data_time: 0.0036  memory: 3596  
2023/01/31 21:54:30 - mmengine - INFO - Epoch(test) [400/500]    eta: 0:00:36  time: 0.3410  data_time: 0.0037  memory: 3596  
2023/01/31 21:54:32 - mmengine - INFO - Epoch(test) [405/500]    eta: 0:00:35  time: 0.3456  data_time: 0.0037  memory: 3596  
2023/01/31 21:54:33 - mmengine - INFO - Epoch(test) [410/500]    eta: 0:00:33  time: 0.3456  data_time: 0.0037  memory: 3596  
2023/01/31 21:54:35 - mmengine - INFO - Epoch(test) [415/500]    eta: 0:00:31  time: 0.3435  data_time: 0.0037  memory: 3596  
2023/01/31 21:54:37 - mmengine - INFO - Epoch(test) [420/500]    eta: 0:00:29  time: 0.3447  data_time: 0.0037  memory: 3596  
2023/01/31 21:54:38 - mmengine - INFO - Epoch(test) [425/500]    eta: 0:00:27  time: 0.3455  data_time: 0.0037  memory: 3596  
2023/01/31 21:54:40 - mmengine - INFO - Epoch(test) [430/500]    eta: 0:00:25  time: 0.3546  data_time: 0.0037  memory: 3596  
2023/01/31 21:54:42 - mmengine - INFO - Epoch(test) [435/500]    eta: 0:00:23  time: 0.3531  data_time: 0.0036  memory: 3596  
2023/01/31 21:54:44 - mmengine - INFO - Epoch(test) [440/500]    eta: 0:00:22  time: 0.3517  data_time: 0.0036  memory: 3596  
2023/01/31 21:54:45 - mmengine - INFO - Epoch(test) [445/500]    eta: 0:00:20  time: 0.3497  data_time: 0.0036  memory: 3596  
2023/01/31 21:54:47 - mmengine - INFO - Epoch(test) [450/500]    eta: 0:00:18  time: 0.3481  data_time: 0.0037  memory: 3596  
2023/01/31 21:54:49 - mmengine - INFO - Epoch(test) [455/500]    eta: 0:00:16  time: 0.3498  data_time: 0.0037  memory: 3596  
2023/01/31 21:54:51 - mmengine - INFO - Epoch(test) [460/500]    eta: 0:00:14  time: 0.3461  data_time: 0.0037  memory: 3596  
2023/01/31 21:54:53 - mmengine - INFO - Epoch(test) [465/500]    eta: 0:00:12  time: 0.3550  data_time: 0.0037  memory: 3596  
2023/01/31 21:54:54 - mmengine - INFO - Epoch(test) [470/500]    eta: 0:00:10  time: 0.3642  data_time: 0.0037  memory: 3596  
2023/01/31 21:54:56 - mmengine - INFO - Epoch(test) [475/500]    eta: 0:00:09  time: 0.3594  data_time: 0.0037  memory: 3596  
2023/01/31 21:54:58 - mmengine - INFO - Epoch(test) [480/500]    eta: 0:00:07  time: 0.3652  data_time: 0.0037  memory: 3596  
2023/01/31 21:55:00 - mmengine - INFO - Epoch(test) [485/500]    eta: 0:00:05  time: 0.3607  data_time: 0.0037  memory: 3596  
2023/01/31 21:55:01 - mmengine - INFO - Epoch(test) [490/500]    eta: 0:00:03  time: 0.3428  data_time: 0.0037  memory: 3596  
2023/01/31 21:55:03 - mmengine - INFO - Epoch(test) [495/500]    eta: 0:00:01  time: 0.3455  data_time: 0.0036  memory: 3596  
2023/01/31 21:55:05 - mmengine - INFO - Epoch(test) [500/500]    eta: 0:00:00  time: 0.3454  data_time: 0.0035  memory: 3596  
2023/01/31 21:55:05 - mmengine - INFO - Evaluating hmean-iou...
2023/01/31 21:55:05 - mmengine - INFO - prediction score threshold: 0.30, recall: 0.6423, precision: 0.6355, hmean: 0.6389

2023/01/31 21:55:05 - mmengine - INFO - prediction score threshold: 0.40, recall: 0.6418, precision: 0.6378, hmean: 0.6398

2023/01/31 21:55:05 - mmengine - INFO - prediction score threshold: 0.50, recall: 0.6389, precision: 0.6609, hmean: 0.6497

2023/01/31 21:55:05 - mmengine - INFO - prediction score threshold: 0.60, recall: 0.6047, precision: 0.7332, hmean: 0.6628

2023/01/31 21:55:05 - mmengine - INFO - prediction score threshold: 0.70, recall: 0.4815, precision: 0.8163, hmean: 0.6057

2023/01/31 21:55:05 - mmengine - INFO - prediction score threshold: 0.80, recall: 0.1984, precision: 0.8879, hmean: 0.3243

2023/01/31 21:55:05 - mmengine - INFO - prediction score threshold: 0.90, recall: 0.0014, precision: 1.0000, hmean: 0.0029

2023/01/31 21:55:05 - mmengine - INFO - Evaluating hmean-iou...
2023/01/31 21:55:05 - mmengine - INFO - prediction score threshold: 0.30, recall: 0.8883, precision: 0.8790, hmean: 0.8836

2023/01/31 21:55:05 - mmengine - INFO - prediction score threshold: 0.40, recall: 0.8873, precision: 0.8818, hmean: 0.8846

2023/01/31 21:55:05 - mmengine - INFO - prediction score threshold: 0.50, recall: 0.8739, precision: 0.9039, hmean: 0.8886

2023/01/31 21:55:05 - mmengine - INFO - prediction score threshold: 0.60, recall: 0.7930, precision: 0.9615, hmean: 0.8691

2023/01/31 21:55:05 - mmengine - INFO - prediction score threshold: 0.70, recall: 0.5831, precision: 0.9886, hmean: 0.7335

2023/01/31 21:55:05 - mmengine - INFO - prediction score threshold: 0.80, recall: 0.2224, precision: 0.9957, hmean: 0.3636

2023/01/31 21:55:05 - mmengine - INFO - prediction score threshold: 0.90, recall: 0.0014, precision: 1.0000, hmean: 0.0029

2023/01/31 21:55:05 - mmengine - INFO - Epoch(test) [500/500]  e2e_icdar/precision: 0.7332  e2e_icdar/recall: 0.6047  e2e_icdar/hmean: 0.6628  icdar/precision: 0.9039  icdar/recall: 0.8739  icdar/hmean: 0.8886
