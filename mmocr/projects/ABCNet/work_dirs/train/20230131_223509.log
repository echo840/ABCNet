2023/01/31 22:35:11 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.9 (main, Jan 11 2023, 15:21:40) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 2123996612
    GPU 0,1: NVIDIA RTX A6000
    CUDA_HOME: /usr/local/cuda-11.3
    NVCC: Cuda compilation tools, release 11.3, V11.3.58
    GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
    PyTorch: 1.12.0
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.13.0
    OpenCV: 4.7.0
    MMEngine: 0.5.0

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: None
    Distributed launcher: pytorch
    Distributed training: True
    GPU number: 2
------------------------------------------------------------

2023/01/31 22:35:12 - mmengine - INFO - Config:
file_client_args = dict(backend='disk')
num_classes = 1
strides = [8, 16, 32, 64, 128]
bbox_coder = dict(type='mmdet.DistancePointBBoxCoder')
with_bezier = True
norm_on_bbox = True
use_sigmoid_cls = True
dictionary = dict(
    type='Dictionary',
    dict_file=
    '/home/user/lz/ABCNet/mmocr/projects/ABCNet/config/abcnet_v2/../../dicts/abcnet.txt',
    with_start=False,
    with_end=False,
    same_start_end=False,
    with_padding=True,
    with_unknown=True)
model = dict(
    type='ABCNet',
    data_preprocessor=dict(
        type='TextDetDataPreprocessor',
        mean=[103.53, 116.28, 123.675],
        std=[1, 1, 1],
        bgr_to_rgb=False,
        pad_size_divisor=32),
    backbone=dict(
        type='mmdet.ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=False),
        norm_eval=True,
        style='caffe',
        init_cfg=dict(
            type='Pretrained',
            checkpoint='open-mmlab://detectron2/resnet50_caffe')),
    neck=dict(
        type='BiFPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        start_level=0,
        add_extra_convs=True,
        norm_cfg=dict(type='BN'),
        num_outs=6,
        relu_before_extra_convs=True),
    det_head=dict(
        type='ABCNetDetHead',
        num_classes=1,
        in_channels=256,
        stacked_convs=4,
        feat_channels=256,
        strides=[8, 16, 32, 64, 128],
        norm_on_bbox=True,
        use_sigmoid_cls=True,
        centerness_on_reg=True,
        dcn_on_last_conv=False,
        conv_bias=True,
        use_scale=False,
        with_bezier=True,
        init_cfg=dict(
            type='Normal',
            layer='Conv2d',
            std=0.01,
            override=dict(
                type='Normal',
                name='conv_cls',
                std=0.01,
                bias=-4.59511985013459)),
        module_loss=dict(
            type='ABCNetDetModuleLoss',
            num_classes=1,
            strides=[8, 16, 32, 64, 128],
            center_sampling=True,
            center_sample_radius=1.5,
            bbox_coder=dict(type='mmdet.DistancePointBBoxCoder'),
            norm_on_bbox=True,
            loss_cls=dict(
                type='mmdet.FocalLoss',
                use_sigmoid=True,
                gamma=2.0,
                alpha=0.25,
                loss_weight=1.0),
            loss_bbox=dict(type='mmdet.GIoULoss', loss_weight=1.0),
            loss_centerness=dict(
                type='mmdet.CrossEntropyLoss',
                use_sigmoid=True,
                loss_weight=1.0)),
        postprocessor=dict(
            type='ABCNetDetPostprocessor',
            use_sigmoid_cls=True,
            strides=[8, 16, 32, 64, 128],
            bbox_coder=dict(type='mmdet.DistancePointBBoxCoder'),
            with_bezier=True,
            test_cfg=dict(
                nms_pre=1000,
                nms=dict(type='nms', iou_threshold=0.4),
                score_thr=0.3))),
    roi_head=dict(
        type='RecRoIHead',
        neck=dict(type='CoordinateHead'),
        roi_extractor=dict(
            type='BezierRoIExtractor',
            roi_layer=dict(
                type='BezierAlign', output_size=(16, 64), sampling_ratio=1.0),
            out_channels=256,
            featmap_strides=[4, 8, 16]),
        rec_head=dict(
            type='ABCNetRec',
            backbone=dict(type='ABCNetRecBackbone'),
            encoder=dict(type='ABCNetRecEncoder'),
            decoder=dict(
                type='ABCNetRecDecoder',
                dictionary=dict(
                    type='Dictionary',
                    dict_file=
                    '/home/user/lz/ABCNet/mmocr/projects/ABCNet/config/abcnet_v2/../../dicts/abcnet.txt',
                    with_start=False,
                    with_end=False,
                    same_start_end=False,
                    with_padding=True,
                    with_unknown=True),
                postprocessor=dict(
                    type='AttentionPostprocessor',
                    ignore_chars=['padding', 'unknown']),
                module_loss=dict(
                    type='CEModuleLoss',
                    ignore_first_char=False,
                    ignore_char=-1,
                    reduction='mean'),
                max_seq_len=25))),
    postprocessor=dict(
        type='ABCNetPostprocessor',
        rescale_fields=['polygons', 'bboxes', 'beziers']))
test_pipeline = [
    dict(
        type='LoadImageFromFile',
        file_client_args=dict(backend='disk'),
        color_type='color_ignore_orientation'),
    dict(type='Resize', scale=(2000, 4000), keep_ratio=True, backend='pillow'),
    dict(
        type='LoadOCRAnnotations',
        with_polygon=True,
        with_bbox=True,
        with_label=True,
        with_text=True),
    dict(
        type='PackTextDetInputs',
        meta_keys=('img_path', 'ori_shape', 'img_shape', 'scale_factor'))
]
train_pipeline = [
    dict(
        type='LoadImageFromFile',
        file_client_args=dict(backend='disk'),
        color_type='color_ignore_orientation'),
    dict(
        type='LoadOCRAnnotations',
        with_polygon=True,
        with_bbox=True,
        with_label=True,
        with_text=True),
    dict(type='RemoveIgnored'),
    dict(type='RandomCrop', min_side_ratio=0.1),
    dict(
        type='RandomRotate',
        max_angle=30,
        pad_with_fixed_color=True,
        use_canvas=True),
    dict(
        type='RandomChoiceResize',
        scales=[(980, 2900), (1044, 2900), (1108, 2900), (1172, 2900),
                (1236, 2900), (1300, 2900), (1364, 2900), (1428, 2900),
                (1492, 2900)],
        keep_ratio=True),
    dict(
        type='PackTextDetInputs',
        meta_keys=('img_path', 'ori_shape', 'img_shape', 'scale_factor'))
]
icdar2015_textspotting_data_root = 'data/icdar2015'
icdar2015_textspotting_train = dict(
    type='OCRDataset',
    data_root='data/icdar2015',
    ann_file='textspotting_train.json',
    pipeline=[
        dict(
            type='LoadImageFromFile',
            file_client_args=dict(backend='disk'),
            color_type='color_ignore_orientation'),
        dict(
            type='LoadOCRAnnotations',
            with_polygon=True,
            with_bbox=True,
            with_label=True,
            with_text=True),
        dict(type='RemoveIgnored'),
        dict(type='RandomCrop', min_side_ratio=0.1),
        dict(
            type='RandomRotate',
            max_angle=30,
            pad_with_fixed_color=True,
            use_canvas=True),
        dict(
            type='RandomChoiceResize',
            scales=[(980, 2900), (1044, 2900), (1108, 2900), (1172, 2900),
                    (1236, 2900), (1300, 2900), (1364, 2900), (1428, 2900),
                    (1492, 2900)],
            keep_ratio=True),
        dict(
            type='PackTextDetInputs',
            meta_keys=('img_path', 'ori_shape', 'img_shape', 'scale_factor'))
    ])
icdar2015_textspotting_test = dict(
    type='OCRDataset',
    data_root='data/icdar2015',
    ann_file='textspotting_test.json',
    test_mode=True,
    pipeline=[
        dict(
            type='LoadImageFromFile',
            file_client_args=dict(backend='disk'),
            color_type='color_ignore_orientation'),
        dict(
            type='Resize',
            scale=(2000, 4000),
            keep_ratio=True,
            backend='pillow'),
        dict(
            type='LoadOCRAnnotations',
            with_polygon=True,
            with_bbox=True,
            with_label=True,
            with_text=True),
        dict(
            type='PackTextDetInputs',
            meta_keys=('img_path', 'ori_shape', 'img_shape', 'scale_factor'))
    ])
default_scope = 'mmocr'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
randomness = dict(seed=None)
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=5),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', interval=20),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    sync_buffer=dict(type='SyncBuffersHook'),
    visualization=dict(
        type='VisualizationHook',
        interval=1,
        enable=False,
        show=False,
        draw_gt=False,
        draw_pred=False))
log_level = 'INFO'
log_processor = dict(type='LogProcessor', window_size=10, by_epoch=True)
load_from = '/home/user/lz/ABCNet/mmocr/projects/ABCNet/model/abcnet-v2_resnet50_bifpn_500e_icdar2015-5e4cc7ed.pth'
resume = False
val_evaluator = [dict(type='E2EHmeanIOUMetric'), dict(type='HmeanIOUMetric')]
test_evaluator = [dict(type='E2EHmeanIOUMetric'), dict(type='HmeanIOUMetric')]
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='TextSpottingLocalVisualizer',
    name='visualizer',
    vis_backends=[dict(type='LocalVisBackend')])
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=1e-07, momentum=0.9, weight_decay=0.0001),
    clip_grad=dict(type='value', clip_value=1))
train_cfg = dict(
    type='EpochBasedTrainLoop', max_epochs=500, val_interval=1, val_begin=0)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
param_scheduler = [
    dict(type='LinearLR', end=1000, start_factor=0.001, by_epoch=False)
]
train_dataloader = dict(
    batch_size=1,
    num_workers=8,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=True),
    dataset=dict(
        type='OCRDataset',
        data_root='data/icdar2015',
        ann_file='textspotting_train.json',
        pipeline=[
            dict(
                type='LoadImageFromFile',
                file_client_args=dict(backend='disk'),
                color_type='color_ignore_orientation'),
            dict(
                type='LoadOCRAnnotations',
                with_polygon=True,
                with_bbox=True,
                with_label=True,
                with_text=True),
            dict(type='RemoveIgnored'),
            dict(type='RandomCrop', min_side_ratio=0.1),
            dict(
                type='RandomRotate',
                max_angle=30,
                pad_with_fixed_color=True,
                use_canvas=True),
            dict(
                type='RandomChoiceResize',
                scales=[(980, 2900), (1044, 2900), (1108, 2900), (1172, 2900),
                        (1236, 2900), (1300, 2900), (1364, 2900), (1428, 2900),
                        (1492, 2900)],
                keep_ratio=True),
            dict(
                type='PackTextDetInputs',
                meta_keys=('img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ]))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='OCRDataset',
        data_root='data/icdar2015',
        ann_file='textspotting_test.json',
        test_mode=True,
        pipeline=[
            dict(
                type='LoadImageFromFile',
                file_client_args=dict(backend='disk'),
                color_type='color_ignore_orientation'),
            dict(
                type='Resize',
                scale=(2000, 4000),
                keep_ratio=True,
                backend='pillow'),
            dict(
                type='LoadOCRAnnotations',
                with_polygon=True,
                with_bbox=True,
                with_label=True,
                with_text=True),
            dict(
                type='PackTextDetInputs',
                meta_keys=('img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ]))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='OCRDataset',
        data_root='data/icdar2015',
        ann_file='textspotting_test.json',
        test_mode=True,
        pipeline=[
            dict(
                type='LoadImageFromFile',
                file_client_args=dict(backend='disk'),
                color_type='color_ignore_orientation'),
            dict(
                type='Resize',
                scale=(2000, 4000),
                keep_ratio=True,
                backend='pillow'),
            dict(
                type='LoadOCRAnnotations',
                with_polygon=True,
                with_bbox=True,
                with_label=True,
                with_text=True),
            dict(
                type='PackTextDetInputs',
                meta_keys=('img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ]))
custom_imports = dict(imports=['abcnet'], allow_failed_imports=False)
find_unused_parameters = True
launcher = 'pytorch'
work_dir = 'work_dirs/'

2023/01/31 22:35:12 - mmengine - WARNING - The "visualizer" registry in mmocr did not set import location. Fallback to call `mmocr.utils.register_all_modules` instead.
2023/01/31 22:35:12 - mmengine - WARNING - The "vis_backend" registry in mmocr did not set import location. Fallback to call `mmocr.utils.register_all_modules` instead.
2023/01/31 22:35:14 - mmengine - WARNING - The "model" registry in mmocr did not set import location. Fallback to call `mmocr.utils.register_all_modules` instead.
2023/01/31 22:35:14 - mmengine - WARNING - The "model" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/01/31 22:35:14 - mmengine - WARNING - The "task util" registry in mmocr did not set import location. Fallback to call `mmocr.utils.register_all_modules` instead.
2023/01/31 22:35:14 - mmengine - WARNING - The "task util" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/01/31 22:35:15 - mmengine - WARNING - The "hook" registry in mmocr did not set import location. Fallback to call `mmocr.utils.register_all_modules` instead.
2023/01/31 22:35:15 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/01/31 22:35:16 - mmengine - WARNING - The "loop" registry in mmocr did not set import location. Fallback to call `mmocr.utils.register_all_modules` instead.
2023/01/31 22:35:16 - mmengine - WARNING - The "dataset" registry in mmocr did not set import location. Fallback to call `mmocr.utils.register_all_modules` instead.
2023/01/31 22:35:16 - mmengine - WARNING - The "transform" registry in mmocr did not set import location. Fallback to call `mmocr.utils.register_all_modules` instead.
2023/01/31 22:35:16 - mmengine - WARNING - The "data sampler" registry in mmocr did not set import location. Fallback to call `mmocr.utils.register_all_modules` instead.
2023/01/31 22:35:16 - mmengine - WARNING - The "optimizer constructor" registry in mmocr did not set import location. Fallback to call `mmocr.utils.register_all_modules` instead.
2023/01/31 22:35:16 - mmengine - WARNING - The "optimizer" registry in mmocr did not set import location. Fallback to call `mmocr.utils.register_all_modules` instead.
2023/01/31 22:35:16 - mmengine - WARNING - The "optim wrapper" registry in mmocr did not set import location. Fallback to call `mmocr.utils.register_all_modules` instead.
2023/01/31 22:35:16 - mmengine - WARNING - The "parameter scheduler" registry in mmocr did not set import location. Fallback to call `mmocr.utils.register_all_modules` instead.
2023/01/31 22:35:16 - mmengine - WARNING - The "metric" registry in mmocr did not set import location. Fallback to call `mmocr.utils.register_all_modules` instead.
2023/01/31 22:35:18 - mmengine - WARNING - The "weight initializer" registry in mmocr did not set import location. Fallback to call `mmocr.utils.register_all_modules` instead.
2023/01/31 22:35:18 - mmengine - INFO - load model from: open-mmlab://detectron2/resnet50_caffe
2023/01/31 22:35:18 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://detectron2/resnet50_caffe
2023/01/31 22:35:18 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: conv1.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.lateral_convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.lateral_convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.lateral_convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.lateral_convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.lateral_convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.lateral_convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.extra_convs.0.0.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.extra_convs.0.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.extra_convs.0.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.0.weight_two_nodes - torch.Size([2, 6]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.0.weight_three_nodes - torch.Size([3, 4]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.0.bifpn_convs.0.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.bifpn_convs.0.bifpn_convs.0.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.0.bifpn_convs.0.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.0.bifpn_convs.1.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.bifpn_convs.0.bifpn_convs.1.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.0.bifpn_convs.1.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.0.bifpn_convs.2.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.bifpn_convs.0.bifpn_convs.2.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.0.bifpn_convs.2.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.0.bifpn_convs.3.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.bifpn_convs.0.bifpn_convs.3.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.0.bifpn_convs.3.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.0.bifpn_convs.4.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.bifpn_convs.0.bifpn_convs.4.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.0.bifpn_convs.4.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.0.bifpn_convs.5.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.bifpn_convs.0.bifpn_convs.5.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.0.bifpn_convs.5.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.0.bifpn_convs.6.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.bifpn_convs.0.bifpn_convs.6.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.0.bifpn_convs.6.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.0.bifpn_convs.7.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.bifpn_convs.0.bifpn_convs.7.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.0.bifpn_convs.7.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.0.bifpn_convs.8.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.bifpn_convs.0.bifpn_convs.8.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.0.bifpn_convs.8.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.0.bifpn_convs.9.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.bifpn_convs.0.bifpn_convs.9.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.0.bifpn_convs.9.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.1.weight_two_nodes - torch.Size([2, 6]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.1.weight_three_nodes - torch.Size([3, 4]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.1.bifpn_convs.0.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.bifpn_convs.1.bifpn_convs.0.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.1.bifpn_convs.0.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.1.bifpn_convs.1.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.bifpn_convs.1.bifpn_convs.1.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.1.bifpn_convs.1.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.1.bifpn_convs.2.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.bifpn_convs.1.bifpn_convs.2.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.1.bifpn_convs.2.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.1.bifpn_convs.3.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.bifpn_convs.1.bifpn_convs.3.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.1.bifpn_convs.3.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.1.bifpn_convs.4.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.bifpn_convs.1.bifpn_convs.4.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.1.bifpn_convs.4.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.1.bifpn_convs.5.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.bifpn_convs.1.bifpn_convs.5.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.1.bifpn_convs.5.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.1.bifpn_convs.6.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.bifpn_convs.1.bifpn_convs.6.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.1.bifpn_convs.6.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.1.bifpn_convs.7.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.bifpn_convs.1.bifpn_convs.7.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.1.bifpn_convs.7.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.1.bifpn_convs.8.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.bifpn_convs.1.bifpn_convs.8.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.1.bifpn_convs.8.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.1.bifpn_convs.9.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.bifpn_convs.1.bifpn_convs.9.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

neck.bifpn_convs.1.bifpn_convs.9.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.cls_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

det_head.cls_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.cls_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.cls_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.cls_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

det_head.cls_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.cls_convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.cls_convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.cls_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

det_head.cls_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.cls_convs.2.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.cls_convs.2.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.cls_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

det_head.cls_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.cls_convs.3.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.cls_convs.3.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.reg_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

det_head.reg_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.reg_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.reg_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.reg_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

det_head.reg_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.reg_convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.reg_convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.reg_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

det_head.reg_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.reg_convs.2.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.reg_convs.2.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.reg_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

det_head.reg_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.reg_convs.3.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.reg_convs.3.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.conv_cls.weight - torch.Size([1, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=-4.59511985013459 

det_head.conv_cls.bias - torch.Size([1]): 
NormalInit: mean=0, std=0.01, bias=-4.59511985013459 

det_head.conv_reg.weight - torch.Size([4, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

det_head.conv_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.01, bias=0 

det_head.conv_bezier.weight - torch.Size([16, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

det_head.conv_bezier.bias - torch.Size([16]): 
NormalInit: mean=0, std=0.01, bias=0 

det_head.conv_centerness.weight - torch.Size([1, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

det_head.conv_centerness.bias - torch.Size([1]): 
NormalInit: mean=0, std=0.01, bias=0 

det_head.scales.0.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.scales.1.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.scales.2.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.scales.3.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of ABCNet  

det_head.scales.4.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.neck.mask_convs.0.conv.weight - torch.Size([256, 258, 3, 3]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.neck.mask_convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.neck.mask_convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.neck.mask_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.neck.mask_convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.neck.mask_convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.neck.mask_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.neck.mask_convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.neck.mask_convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.neck.mask_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.neck.mask_convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.neck.mask_convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.backbone.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.rec_head.backbone.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.backbone.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.backbone.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.rec_head.backbone.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.backbone.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.backbone.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.rec_head.backbone.convs.2.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.backbone.convs.2.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.backbone.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.rec_head.backbone.convs.3.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.backbone.convs.3.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.encoder.layer.rnn.weight_ih_l0 - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.encoder.layer.rnn.weight_hh_l0 - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.encoder.layer.rnn.bias_ih_l0 - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.encoder.layer.rnn.bias_hh_l0 - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.encoder.layer.rnn.weight_ih_l0_reverse - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.encoder.layer.rnn.weight_hh_l0_reverse - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.encoder.layer.rnn.bias_ih_l0_reverse - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.encoder.layer.rnn.bias_hh_l0_reverse - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.encoder.layer.embedding.weight - torch.Size([256, 512]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.encoder.layer.embedding.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.decoder.embedding.weight - torch.Size([97, 256]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.decoder.attn_combine.weight - torch.Size([256, 512]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.decoder.attn_combine.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.decoder.gru.weight_ih_l0 - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.decoder.gru.weight_hh_l0 - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.decoder.gru.bias_ih_l0 - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.decoder.gru.bias_hh_l0 - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.decoder.out.weight - torch.Size([97, 256]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.decoder.out.bias - torch.Size([97]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.decoder.vat.weight - torch.Size([1, 256]): 
The value is the same before and after calling `init_weights` of ABCNet  

roi_head.rec_head.decoder.vat.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of ABCNet  
2023/01/31 22:35:18 - mmengine - INFO - Load checkpoint from /home/user/lz/ABCNet/mmocr/projects/ABCNet/model/abcnet-v2_resnet50_bifpn_500e_icdar2015-5e4cc7ed.pth
2023/01/31 22:36:34 - mmengine - INFO - Epoch(train)   [1][  5/500]  lr: 5.0000e-10  eta: 44 days, 2:52:58  time: 15.2482  data_time: 0.0769  memory: 41258  loss: 144.1480  loss_cls: 0.1539  loss_bbox: 0.1772  loss_centerness: 0.6883  loss_bezier: 142.0850  loss_ce: 1.0436
2023/01/31 22:36:41 - mmengine - INFO - Epoch(val)   [1][  5/250]    eta: 0:05:21  time: 1.3113  data_time: 0.0881  memory: 34961  
2023/01/31 22:36:43 - mmengine - INFO - Epoch(val)   [1][ 10/250]    eta: 0:03:24  time: 0.8506  data_time: 0.0458  memory: 10514  
2023/01/31 22:36:44 - mmengine - INFO - Epoch(val)   [1][ 15/250]    eta: 0:02:40  time: 0.3671  data_time: 0.0038  memory: 4134  
2023/01/31 22:36:46 - mmengine - INFO - Epoch(val)   [1][ 20/250]    eta: 0:02:20  time: 0.3722  data_time: 0.0042  memory: 10755  
2023/01/31 22:36:48 - mmengine - INFO - Epoch(val)   [1][ 25/250]    eta: 0:02:05  time: 0.3757  data_time: 0.0041  memory: 4134  
2023/01/31 22:36:50 - mmengine - INFO - Epoch(val)   [1][ 30/250]    eta: 0:01:55  time: 0.3472  data_time: 0.0040  memory: 4134  
2023/01/31 22:36:52 - mmengine - INFO - Epoch(val)   [1][ 35/250]    eta: 0:01:47  time: 0.3441  data_time: 0.0040  memory: 4134  
2023/01/31 22:36:54 - mmengine - INFO - Epoch(val)   [1][ 40/250]    eta: 0:01:41  time: 0.3569  data_time: 0.0041  memory: 10686  
2023/01/31 22:36:55 - mmengine - INFO - Epoch(val)   [1][ 45/250]    eta: 0:01:35  time: 0.3520  data_time: 0.0041  memory: 4134  
2023/01/31 22:36:57 - mmengine - INFO - Epoch(val)   [1][ 50/250]    eta: 0:01:31  time: 0.3663  data_time: 0.0039  memory: 11100  
2023/01/31 22:36:59 - mmengine - INFO - Epoch(val)   [1][ 55/250]    eta: 0:01:27  time: 0.3785  data_time: 0.0038  memory: 10720  
2023/01/31 22:37:01 - mmengine - INFO - Epoch(val)   [1][ 60/250]    eta: 0:01:23  time: 0.3477  data_time: 0.0039  memory: 4134  
2023/01/31 22:37:02 - mmengine - INFO - Epoch(val)   [1][ 65/250]    eta: 0:01:20  time: 0.3425  data_time: 0.0039  memory: 4134  
2023/01/31 22:37:04 - mmengine - INFO - Epoch(val)   [1][ 70/250]    eta: 0:01:16  time: 0.3439  data_time: 0.0040  memory: 4134  
2023/01/31 22:37:06 - mmengine - INFO - Epoch(val)   [1][ 75/250]    eta: 0:01:14  time: 0.3757  data_time: 0.0040  memory: 10893  
2023/01/31 22:37:08 - mmengine - INFO - Epoch(val)   [1][ 80/250]    eta: 0:01:11  time: 0.3936  data_time: 0.0040  memory: 10790  
2023/01/31 22:37:10 - mmengine - INFO - Epoch(val)   [1][ 85/250]    eta: 0:01:08  time: 0.3562  data_time: 0.0040  memory: 4134  
2023/01/31 22:37:11 - mmengine - INFO - Epoch(val)   [1][ 90/250]    eta: 0:01:06  time: 0.3426  data_time: 0.0040  memory: 4134  
2023/01/31 22:37:14 - mmengine - INFO - Epoch(val)   [1][ 95/250]    eta: 0:01:04  time: 0.3865  data_time: 0.0040  memory: 11721  
2023/01/31 22:37:15 - mmengine - INFO - Epoch(val)   [1][100/250]    eta: 0:01:01  time: 0.3869  data_time: 0.0039  memory: 4134  
2023/01/31 22:37:17 - mmengine - INFO - Epoch(val)   [1][105/250]    eta: 0:00:59  time: 0.3454  data_time: 0.0040  memory: 4134  
2023/01/31 22:37:19 - mmengine - INFO - Epoch(val)   [1][110/250]    eta: 0:00:56  time: 0.3434  data_time: 0.0041  memory: 4134  
2023/01/31 22:37:20 - mmengine - INFO - Epoch(val)   [1][115/250]    eta: 0:00:54  time: 0.3406  data_time: 0.0042  memory: 4134  
2023/01/31 22:37:22 - mmengine - INFO - Epoch(val)   [1][120/250]    eta: 0:00:51  time: 0.3423  data_time: 0.0042  memory: 4134  
2023/01/31 22:37:24 - mmengine - INFO - Epoch(val)   [1][125/250]    eta: 0:00:49  time: 0.3593  data_time: 0.0042  memory: 10824  
2023/01/31 22:37:26 - mmengine - INFO - Epoch(val)   [1][130/250]    eta: 0:00:47  time: 0.3557  data_time: 0.0043  memory: 4134  
2023/01/31 22:37:27 - mmengine - INFO - Epoch(val)   [1][135/250]    eta: 0:00:45  time: 0.3408  data_time: 0.0043  memory: 4134  
2023/01/31 22:37:29 - mmengine - INFO - Epoch(val)   [1][140/250]    eta: 0:00:43  time: 0.3376  data_time: 0.0042  memory: 4134  
2023/01/31 22:37:31 - mmengine - INFO - Epoch(val)   [1][145/250]    eta: 0:00:40  time: 0.3338  data_time: 0.0043  memory: 4134  
2023/01/31 22:37:33 - mmengine - INFO - Epoch(val)   [1][150/250]    eta: 0:00:38  time: 0.3408  data_time: 0.0044  memory: 4134  
2023/01/31 22:37:34 - mmengine - INFO - Epoch(val)   [1][155/250]    eta: 0:00:36  time: 0.3415  data_time: 0.0043  memory: 4134  
2023/01/31 22:37:37 - mmengine - INFO - Epoch(val)   [1][160/250]    eta: 0:00:35  time: 0.4027  data_time: 0.0042  memory: 11376  
2023/01/31 22:37:38 - mmengine - INFO - Epoch(val)   [1][165/250]    eta: 0:00:32  time: 0.4044  data_time: 0.0043  memory: 4134  
2023/01/31 22:37:40 - mmengine - INFO - Epoch(val)   [1][170/250]    eta: 0:00:30  time: 0.3385  data_time: 0.0043  memory: 4134  
2023/01/31 22:37:42 - mmengine - INFO - Epoch(val)   [1][175/250]    eta: 0:00:28  time: 0.3412  data_time: 0.0043  memory: 4134  
2023/01/31 22:37:43 - mmengine - INFO - Epoch(val)   [1][180/250]    eta: 0:00:26  time: 0.3449  data_time: 0.0044  memory: 4134  
2023/01/31 22:37:45 - mmengine - INFO - Epoch(val)   [1][185/250]    eta: 0:00:24  time: 0.3507  data_time: 0.0044  memory: 4134  
2023/01/31 22:37:47 - mmengine - INFO - Epoch(val)   [1][190/250]    eta: 0:00:22  time: 0.3504  data_time: 0.0044  memory: 4134  
2023/01/31 22:37:49 - mmengine - INFO - Epoch(val)   [1][195/250]    eta: 0:00:20  time: 0.3440  data_time: 0.0043  memory: 4134  
2023/01/31 22:37:50 - mmengine - INFO - Epoch(val)   [1][200/250]    eta: 0:00:19  time: 0.3438  data_time: 0.0043  memory: 4134  
2023/01/31 22:37:52 - mmengine - INFO - Epoch(val)   [1][205/250]    eta: 0:00:17  time: 0.3451  data_time: 0.0043  memory: 4134  
2023/01/31 22:37:54 - mmengine - INFO - Epoch(val)   [1][210/250]    eta: 0:00:15  time: 0.3475  data_time: 0.0043  memory: 4134  
2023/01/31 22:37:56 - mmengine - INFO - Epoch(val)   [1][215/250]    eta: 0:00:13  time: 0.3469  data_time: 0.0042  memory: 4134  
2023/01/31 22:37:57 - mmengine - INFO - Epoch(val)   [1][220/250]    eta: 0:00:11  time: 0.3405  data_time: 0.0042  memory: 4134  
2023/01/31 22:37:59 - mmengine - INFO - Epoch(val)   [1][225/250]    eta: 0:00:09  time: 0.3423  data_time: 0.0042  memory: 4134  
2023/01/31 22:38:01 - mmengine - INFO - Epoch(val)   [1][230/250]    eta: 0:00:07  time: 0.3458  data_time: 0.0042  memory: 4134  
2023/01/31 22:38:02 - mmengine - INFO - Epoch(val)   [1][235/250]    eta: 0:00:05  time: 0.3512  data_time: 0.0043  memory: 4134  
2023/01/31 22:38:04 - mmengine - INFO - Epoch(val)   [1][240/250]    eta: 0:00:03  time: 0.3740  data_time: 0.0044  memory: 4134  
2023/01/31 22:38:06 - mmengine - INFO - Epoch(val)   [1][245/250]    eta: 0:00:01  time: 0.3619  data_time: 0.0047  memory: 4134  
2023/01/31 22:38:08 - mmengine - INFO - Epoch(val)   [1][250/250]    eta: 0:00:00  time: 0.3369  data_time: 0.0047  memory: 4134  
2023/01/31 22:38:08 - mmengine - INFO - Evaluating hmean-iou...
2023/01/31 22:38:08 - mmengine - INFO - prediction score threshold: 0.30, recall: 0.6341, precision: 0.6251, hmean: 0.6295

2023/01/31 22:38:08 - mmengine - INFO - prediction score threshold: 0.40, recall: 0.6341, precision: 0.6280, hmean: 0.6310

2023/01/31 22:38:08 - mmengine - INFO - prediction score threshold: 0.50, recall: 0.6307, precision: 0.6485, hmean: 0.6395

2023/01/31 22:38:08 - mmengine - INFO - prediction score threshold: 0.60, recall: 0.5985, precision: 0.7227, hmean: 0.6547

2023/01/31 22:38:08 - mmengine - INFO - prediction score threshold: 0.70, recall: 0.4771, precision: 0.8096, hmean: 0.6004

2023/01/31 22:38:08 - mmengine - INFO - prediction score threshold: 0.80, recall: 0.1892, precision: 0.8772, hmean: 0.3113

2023/01/31 22:38:08 - mmengine - INFO - prediction score threshold: 0.90, recall: 0.0005, precision: 1.0000, hmean: 0.0010

2023/01/31 22:38:08 - mmengine - INFO - Evaluating hmean-iou...
2023/01/31 22:38:08 - mmengine - INFO - prediction score threshold: 0.30, recall: 0.8912, precision: 0.8785, hmean: 0.8848

2023/01/31 22:38:08 - mmengine - INFO - prediction score threshold: 0.40, recall: 0.8897, precision: 0.8813, hmean: 0.8855

2023/01/31 22:38:08 - mmengine - INFO - prediction score threshold: 0.50, recall: 0.8748, precision: 0.8995, hmean: 0.8870

2023/01/31 22:38:08 - mmengine - INFO - prediction score threshold: 0.60, recall: 0.7939, precision: 0.9587, hmean: 0.8686

2023/01/31 22:38:08 - mmengine - INFO - prediction score threshold: 0.70, recall: 0.5816, precision: 0.9869, hmean: 0.7319

2023/01/31 22:38:08 - mmengine - INFO - prediction score threshold: 0.80, recall: 0.2147, precision: 0.9955, hmean: 0.3533

2023/01/31 22:38:08 - mmengine - INFO - prediction score threshold: 0.90, recall: 0.0005, precision: 1.0000, hmean: 0.0010

2023/01/31 22:38:08 - mmengine - INFO - Epoch(val) [1][250/250]  e2e_icdar/precision: 0.7227  e2e_icdar/recall: 0.5985  e2e_icdar/hmean: 0.6547  icdar/precision: 0.8995  icdar/recall: 0.8748  icdar/hmean: 0.8870
2023/01/31 22:39:03 - mmengine - INFO - Epoch(train)   [2][  5/500]  lr: 1.0000e-09  eta: 38 days, 3:03:30  time: 13.1774  data_time: 0.0475  memory: 43147  loss: 108.3597  loss_cls: 0.1668  loss_bbox: 0.1496  loss_centerness: 0.6462  loss_bezier: 106.3972  loss_ce: 0.9999
2023/01/31 22:39:28 - mmengine - INFO - Epoch(val)   [2][  5/250]    eta: 0:19:50  time: 2.5985  data_time: 0.0288  memory: 4134  
2023/01/31 22:39:29 - mmengine - INFO - Epoch(val)   [2][ 10/250]    eta: 0:10:22  time: 2.5933  data_time: 0.0281  memory: 4134  
2023/01/31 22:39:31 - mmengine - INFO - Epoch(val)   [2][ 15/250]    eta: 0:07:12  time: 0.3346  data_time: 0.0035  memory: 4134  
2023/01/31 22:39:33 - mmengine - INFO - Epoch(val)   [2][ 20/250]    eta: 0:05:38  time: 0.3459  data_time: 0.0040  memory: 4134  
2023/01/31 22:39:35 - mmengine - INFO - Epoch(val)   [2][ 25/250]    eta: 0:04:40  time: 0.3503  data_time: 0.0041  memory: 4134  
2023/01/31 22:39:36 - mmengine - INFO - Epoch(val)   [2][ 30/250]    eta: 0:04:00  time: 0.3440  data_time: 0.0041  memory: 4134  
2023/01/31 22:39:38 - mmengine - INFO - Epoch(val)   [2][ 35/250]    eta: 0:03:32  time: 0.3403  data_time: 0.0040  memory: 4134  
2023/01/31 22:39:40 - mmengine - INFO - Epoch(val)   [2][ 40/250]    eta: 0:03:10  time: 0.3432  data_time: 0.0041  memory: 4134  
2023/01/31 22:39:41 - mmengine - INFO - Epoch(val)   [2][ 45/250]    eta: 0:02:52  time: 0.3385  data_time: 0.0041  memory: 4134  
2023/01/31 22:39:43 - mmengine - INFO - Epoch(val)   [2][ 50/250]    eta: 0:02:39  time: 0.3534  data_time: 0.0041  memory: 4134  
2023/01/31 22:39:45 - mmengine - INFO - Epoch(val)   [2][ 55/250]    eta: 0:02:27  time: 0.3543  data_time: 0.0040  memory: 4134  
2023/01/31 22:39:47 - mmengine - INFO - Epoch(val)   [2][ 60/250]    eta: 0:02:16  time: 0.3335  data_time: 0.0039  memory: 4134  
2023/01/31 22:39:48 - mmengine - INFO - Epoch(val)   [2][ 65/250]    eta: 0:02:07  time: 0.3402  data_time: 0.0039  memory: 4134  
